<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <RadialGradientBrush x:Key="Brush1">
        <GradientStop Color="White" />
        <GradientStop Color="Black" Offset="1" />
    </RadialGradientBrush>

    <RadialGradientBrush x:Key="Brush2">
        <GradientStop Color="Black" />
        <GradientStop Color="White" Offset="1" />
    </RadialGradientBrush>
    <!--<Style  TargetType="Button">

        <Setter Property="Background" Value="{StaticResource Brush1}"/>
        <Setter Property="Foreground" Value="DarkBlue"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="BorderBrush" Value="Brown"/>
        <Setter Property="BorderThickness" Value="10"/>
    

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property = "Background" Value="{StaticResource Brush2}"/>
                <Setter Property="Foreground" Value="black"></Setter>
               
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property = "Foreground" Value="green"/>
            </Trigger>
        </Style.Triggers>
    </Style>-->



    <Style TargetType="Button" x:Key="MyButton">
        
        <Setter Property="Background" Value="{StaticResource Brush1}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="BorderBrush" Value="Brown"/>
        <Setter Property="BorderThickness" Value="10"/>

        <Setter Property="MinHeight" Value="23"/>
        <Setter Property="MinWidth" Value="75"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border 
                                x:Name="Border"  
                                CornerRadius="2" 
                                BorderThickness="1"
                                Background="{StaticResource Brush1}"
                                BorderBrush="{StaticResource Brush2}">
                                <ContentPresenter 
                                        Margin="2"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DefaultedBorderBrush}" />
                        </Trigger>-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="White" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Brush2}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="DarkBlue" />
                            <Setter Property="Foreground" Value="White" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="Green" />
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="MyCircleButton">

        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="BorderBrush" Value="Brown"/>
        <Setter Property="BorderThickness" Value="10"/>

        <Setter Property="MinHeight" Value="23"/>
        <Setter Property="MinWidth" Value="75"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Ellipse Name="ellipse" StrokeThickness="3" Stroke="Blue"></Ellipse>

                        <ContentPresenter 
                                        Margin="2"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        RecognizesAccessKey="True"/>

                    </Grid>



                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="Orange" />
                            <Setter TargetName="ellipse" Property="Stroke" Value="{StaticResource Brush2}" />
                            <Setter TargetName="ellipse" Property="Fill" Value="Green" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="ellipse" Property="Stroke" Value="DarkBlue" />
                            <Setter Property="Foreground" Value="White" />
                            <Setter TargetName="ellipse" Property="Fill" Value="Green" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Styles and other resources below here. -->
    <LinearGradientBrush x:Key="GrayBlueGradientBrush" 
    StartPoint="0,0" EndPoint="1,1">
        <GradientStop Color="DarkGray" Offset="0" />
        <GradientStop Color="#CCCCFF" Offset="0.5" />
        <GradientStop Color="DarkGray" Offset="1" />
    </LinearGradientBrush>

    <GradientStopCollection x:Key="MyGlassGradientStopsResource">
        <GradientStop Color="WhiteSmoke" Offset="0.2" />
        <GradientStop Color="Transparent" Offset="0.4" />
        <GradientStop Color="WhiteSmoke" Offset="0.5" />
        <GradientStop Color="Transparent" Offset="0.75" />
        <GradientStop Color="WhiteSmoke" Offset="0.9" />
        <GradientStop Color="Transparent" Offset="1" />
    </GradientStopCollection>

    <LinearGradientBrush x:Key="MyGlassBrushResource" 
   StartPoint="0,0" EndPoint="1,1" Opacity="0.75" 
   GradientStops="{StaticResource MyGlassGradientStopsResource}" />
    <Style TargetType="Button" x:Key="MyGlassButton">
        <Setter Property="Background" Value="{StaticResource GrayBlueGradientBrush}" />

        <!--<Setter Property="Width" Value="90" />-->
        <!--<Setter Property="Margin" Value="10" />-->
        <!--<Setter Property="Height" Value="70"/>-->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="{TemplateBinding Width}" 
      Height="{TemplateBinding Height}" ClipToBounds="True">

                        <!-- Outer Rectangle with rounded corners. -->
                        <Rectangle x:Name="outerRectangle" HorizontalAlignment="Stretch" 
      VerticalAlignment="Stretch" Stroke="{TemplateBinding Background}" 
      RadiusX="20" RadiusY="20" StrokeThickness="5" Fill="Transparent" />

                        <!-- Inner Rectangle with rounded corners. -->
                        <Rectangle x:Name="innerRectangle" HorizontalAlignment="Stretch" 
        VerticalAlignment="Stretch" Stroke="Transparent" 
        StrokeThickness="20" 
        Fill="{TemplateBinding Background}" RadiusX="20" RadiusY="20" 
      />

                        <!-- Glass Rectangle -->
                        <Rectangle x:Name="glassCube" HorizontalAlignment="Stretch"
        VerticalAlignment="Stretch"
        StrokeThickness="2" RadiusX="10" RadiusY="10" Opacity="0"
        Fill="{StaticResource MyGlassBrushResource}"
        RenderTransformOrigin="0.5,0.5">
                            <Rectangle.Stroke>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStop Offset="0.0" Color="LightBlue" />
                                        <GradientStop Offset="1.0" Color="Gray" />
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Rectangle.Stroke>

                            <!-- These transforms have no effect as they 
             are declared here. 
             The reason the transforms are included is to be targets 
             for animation (see later). -->
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <RotateTransform />
                                </TransformGroup>
                            </Rectangle.RenderTransform>

                            <!-- A BevelBitmapEffect is applied to give the button a 
               "Beveled" look. -->
                            <Rectangle.BitmapEffect>
                                <BevelBitmapEffect />
                            </Rectangle.BitmapEffect>
                        </Rectangle>

                        <!-- Present Text of the button. -->
                        <DockPanel Name="myContentPresenterDockPanel" >
                            <ContentPresenter x:Name="myContentPresenter" Margin="20" 
          Content="{TemplateBinding  Content}" HorizontalAlignment="Center"  VerticalAlignment="Center" TextBlock.Foreground="Black" />
                        </DockPanel>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!-- Set action triggers for the buttons and define
           what the button does in response to those triggers. -->


                        <!-- Set properties when mouse pointer is over the button. -->
                        <Trigger Property="IsMouseOver" Value="True">

                            <!-- Below are three property settings that occur when the 
         condition is met (user mouses over button).  -->
                            <!-- Change the color of the outer rectangle when user 
         mouses over it. -->
                            <Setter Property ="Rectangle.Stroke" TargetName="outerRectangle"
      Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}" />

                            <!-- Sets the glass opacity to 1, therefore, the 
         glass "appears" when user mouses over it. -->
                            <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />

                            <!-- Makes the text slightly blurry as though you 
         were looking at it through blurry glass. -->
                            <Setter Property="ContentPresenter.BitmapEffect" 
      TargetName="myContentPresenter">
                                <Setter.Value>
                                    <BlurBitmapEffect Radius="1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <!-- Set properties when button has focus. -->
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Rectangle.Opacity" Value="1"       TargetName="glassCube" />
                            <Setter Property="Rectangle.Stroke" TargetName="outerRectangle"
      Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />
                        </Trigger>

                        <!-- Animations that start when mouse enters and leaves button. -->
                        <EventTrigger RoutedEvent="Mouse.MouseEnter">
                            <EventTrigger.Actions>
                                <BeginStoryboard Name="mouseEnterBeginStoryboard">
                                    <Storyboard>

                                        <!-- This animation makes the glass rectangle shrink in the X direction. -->
                                        <DoubleAnimation Storyboard.TargetName="glassCube" 
          Storyboard.TargetProperty=
          "(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
          By="-0.1" Duration="0:0:0.5" />

                                        <!-- This animation makes the glass rectangle shrink in the Y direction. -->
                                        <DoubleAnimation
        Storyboard.TargetName="glassCube" 
          Storyboard.TargetProperty=
          "(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" 
          By="-0.1" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Mouse.MouseLeave">
                            <EventTrigger.Actions>

                                <!-- Stopping the storyboard sets all animated properties back to default. -->
                                <StopStoryboard BeginStoryboardName="mouseEnterBeginStoryboard" />
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <!-- Animation fires when button is clicked, causing glass to spin.  -->
                        <EventTrigger RoutedEvent="Button.Click">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="glassCube" 
          Storyboard.TargetProperty=
          "(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" 
          By="360" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

</ResourceDictionary>
