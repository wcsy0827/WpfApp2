<Window x:Class="WpfApplication1.Common.Window_Validation"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:common="clr-namespace:WpfApplication1.Common"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        
        Title="Window_Validation" Height="414" Width="922.693">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Dictionary_ValidationErrorTemlate.xaml"></ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>

    </Window.Resources>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="159*"/>
            <RowDefinition Height="224*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <!--Style="{StaticResource textStyleTextBox}"-->


        <!--自訂 ErrorTemplate   + tooltip -->
        <!--UpdateSourceTrigger="PropertyChanged" 只要 property change 就 trigger 做驗證-->
        <!--Binding UpdateSourceTrigger 屬性
            //以下為修改 binding 的目標物件=> 就會更新 到來源物件 
            //因為 UpdateSourceTrigger 屬性 值判斷繫結來源更新的時機。
            // Binding UpdateSourceTrigger 值。預設為 Default，
             它會傳回目標相依性屬性的預設 UpdateSourceTrigger 值。
             不過，大多數相依性屬性的預設值為 PropertyChanged，而 Text 屬性具有 LostFocus 的預設值。-->

        <!--預設的 error Template   + tooltip  " -->

        <!--預設的 error Template   + tooltip  Style="{StaticResource textStyleTextBox}" -->

        <StackPanel  Grid.Column="1" Background="LightBlue"  Orientation="Vertical" Grid.RowSpan="2" Margin="0,0,0,215">
            <TextBlock Background="DarkBlue" Foreground="White" Text="Binding UpdateSourceTrigger=PropertyChanged" Margin="3"></TextBlock>
            <TextBox Margin="3" x:Name="StartDateEntryForm" 
    			Validation.ErrorTemplate="{StaticResource validationErrorTemplate1}">
                <Binding Path="StartDate" UpdateSourceTrigger="PropertyChanged" >
                    <!--Converter="{StaticResource dateConverter}" >-->
                    <Binding.ValidationRules>
                        <common:FutureDateRule />
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>


            <TextBox Margin="3" Validation.ErrorTemplate="{StaticResource validationErrorTemplate2}"  Style="{StaticResource textStyleTextBox}" Width="Auto" >
                <Binding  Path="Range"  UpdateSourceTrigger="PropertyChanged" >
                    <Binding.ValidationRules>
                        <common:RangeValidator />
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>

            <TextBox  Width="Auto"   Validation.ErrorTemplate="{StaticResource validationErrorTemplate1}"  Style="{StaticResource textStyleTextBox}" Margin="3">
                <Binding  Path="Range"  UpdateSourceTrigger="PropertyChanged" >
                    <Binding.ValidationRules>
                        <common:RangeValidator />
                    </Binding.ValidationRules>
                </Binding>

            </TextBox>



            <TextBox x:Name="textBox1" RenderTransformOrigin="0.521,-0.13" Margin="3"  >
                <Binding  Path="Range"  UpdateSourceTrigger="Explicit" >
                    <Binding.ValidationRules>
                        <common:RangeValidator />
                    </Binding.ValidationRules>
                </Binding>

            </TextBox>

        </StackPanel>

        <StackPanel  Background="Yellow" Orientation="Vertical"  Margin="10,0,10,161" Grid.Column="0" Grid.RowSpan="2">
            <TextBlock Background="DarkBlue" Foreground="White" Text="Binding UpdateSourceTrigger=LostFocus" Margin="3"></TextBlock>
            <Grid Height="auto" Margin="10,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="186*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <!--1. By default you will see a red border around the UI element when this happens, e.g. if you are typing a letter into a TextBox bound to a source property of type int:-->
                <!--defautl: ValidatesOnDataErrors=True, ValidatesOnExceptions=True-->
                <TextBox  Margin="5" Grid.Column="1" Text="{Binding Age}"  Tag="{Binding (Grid.Row), ElementName=textBox4}"  x:Name="textBox4_Copy" TextWrapping="Wrap" />

                <TextBox  Margin="5" Grid.Row="1" Grid.Column="1" x:Name="textBox3" TextWrapping="Wrap" >
                    <TextBox.Text>
                        <Binding Path="Age">
                            <Binding.ValidationRules>
                                <common:RangeValidator />
                                <ExceptionValidationRule />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>

                </TextBox>
                <TextBox  Margin="5" Grid.Row="2" Grid.Column="1" Name="textBox2"  Tag="{Binding  Path=(Validation.Errors),  ElementName=textBox2}"    
                          >

                    <TextBox.Text>
                        <Binding Path="Age" ValidatesOnExceptions="True"  ValidatesOnDataErrors="True">
                            <Binding.ValidationRules>
                                <common:RangeValidator />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                    <!--To be able to see the error messages in the view you can replace the default control template that draws the red border around the element with your own custom template 
            by setting the Validation.ErrorTemplate attached property of the control:-->

                    <Validation.ErrorTemplate >
                        <ControlTemplate>
                            <StackPanel >
                                <!-- Placeholder for the TextBox itself -->
                                <Border BorderBrush="Red" BorderThickness="2" CornerRadius="10">
                                    <AdornedElementPlaceholder x:Name="ErrorAdorner"/>
                                </Border>
                                <TextBlock Text="{Binding [0].ErrorContent}" Foreground="Red"/>
                                <!--<TextBlock Text="{Binding ElementName=ErrorAdorner, Path=AdornedElement.(Validation.Errors).CurrentItem.ErrorContent}" Foreground="Blue" />-->

                            </StackPanel>
                        </ControlTemplate>
                    </Validation.ErrorTemplate>
                </TextBox>
                <Label  Content="Age: (default)" />
                <Label Grid.Row="1" Content="Age: (8~32)"/>
                <Label Grid.Row="2" Content="ErrorTemplate"/>
            </Grid>
            <!--1. By default you will see a red border around the UI element when this happens, e.g. if you are typing a letter into a TextBox bound to a source property of type int:-->

            <!--2. Custom validation Rules-->

            <!--3. with custom errorTemplate-->

            <!--For attached property binding you need to wrap binding in parenthesis. 附加屬性要加 ()-->
            <!--<Label Background="{Binding (controls:ZoneStylingBehavior.ZoneBackground), 
                            RelativeSource={RelativeSource Self}}"
       Content="test"/>-->
        </StackPanel>




    </Grid>
</Window>
